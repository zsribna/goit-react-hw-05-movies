{"version":3,"file":"static/js/298.76070747.chunk.js","mappings":"+PAWA,EATmB,SAAC,GAAuB,IAAtBA,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,QAC3B,OACE,2BACE,oCAAYD,MACZ,uBAAIC,MAGT,ECoDD,EAxDgB,WACd,IAAQC,GAAOC,EAAAA,EAAAA,MAAPD,GAER,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAAgCJ,EAAAA,EAAAA,WAAS,GAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KACA,GAAwCN,EAAAA,EAAAA,UACtC,yCADF,eAAOO,EAAP,KAAqBC,EAArB,KAqBA,OAjBAC,EAAAA,EAAAA,YAAU,WAAM,wCAEd,oGAEIL,GAAa,GAFjB,UAG0BM,EAAAA,EAAAA,IAAUZ,GAHpC,OAGUG,EAHV,OAIIC,EAAWD,GAJf,gDAMIK,GAAY,GACZE,EAAgB,KAAMG,SAP1B,yBASIP,GAAa,GATjB,6EAFc,sBACTN,GADS,mCAcdc,EACD,GAAE,CAACd,KAGF,gCACGO,IACC,0BACE,uBAAIE,MAGPJ,IACC,0BACE,wCAGgB,IAAnBF,EAAQY,QACP,4DAEA,wBACGZ,EAAQa,KAAI,SAAAlB,GAAM,OACjB,SAAC,EAAD,CAEEA,OAAQA,EAAOA,OACfC,QAASD,EAAOC,SAFXD,EAAOE,GAFG,QAW5B,C","sources":["components/ReviewItem/ReviewItem.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import React from 'react';\n\nconst ReviewItem = ({author, content}) => {\n  return (\n    <li>\n      <p>Author: {author}</p>\n      <p>{content}</p>\n    </li>\n  );\n}\n\nexport default ReviewItem;","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReview } from '../../services/getTrendingMovies';\nimport ReviewItem from '../ReviewItem/ReviewItem';\n\nconst Reviews = () => {\n  const { id } = useParams();\n\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\n    'Something went wrong! Try again later'\n  );\n\n  useEffect(() => {\n    if (!id) return;\n    async function fetchReviews() {\n      try {\n        setIsLoading(true);\n        const reviews = await getReview(id);\n        setReviews(reviews);\n      } catch (error) {\n        setHasError(true);\n        setErrorMessage(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchReviews();\n  }, [id]);\n\n  return (\n    <>\n      {hasError && (\n        <div>\n          <p>{errorMessage}</p>\n        </div>\n      )}\n      {isLoading && (\n        <div>\n          <p>Loading...</p>\n        </div>\n      )}\n      {reviews.length === 0 ? (\n        <p>No reviews for this movie found</p>\n      ) : (\n        <ul>\n          {reviews.map(author => (\n            <ReviewItem\n              key={author.id}\n              author={author.author}\n              content={author.content}\n            />\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n"],"names":["author","content","id","useParams","useState","reviews","setReviews","isLoading","setIsLoading","hasError","setHasError","errorMessage","setErrorMessage","useEffect","getReview","message","fetchReviews","length","map"],"sourceRoot":""}