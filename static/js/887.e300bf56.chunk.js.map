{"version":3,"file":"static/js/887.e300bf56.chunk.js","mappings":"6OAgBA,EAZiB,SAAC,GAAuC,IAArCA,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aAC7BC,EAAWD,EAAY,UAHV,mCAGU,OAAqBA,GAAiB,GAEnE,OACE,2BACE,gBAAKE,IAAKD,EAAUE,IAAI,MACxB,0CAAkBJ,MAClB,uCAAeD,OAGpB,E,kBCsDD,EA/Da,WACX,IAAQM,GAAOC,EAAAA,EAAAA,MAAPD,GAER,GAAgCE,EAAAA,EAAAA,UAAS,MAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAAgCJ,EAAAA,EAAAA,WAAS,GAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KACA,GAAwCN,EAAAA,EAAAA,UACtC,yCADF,eAAOO,EAAP,KAAqBC,EAArB,KAsBA,OAlBAC,EAAAA,EAAAA,YAAU,WAAM,wCAEd,oGAEIL,GAAa,GAFjB,UAGuBM,EAAAA,EAAAA,IAAQZ,GAH/B,OAGUa,EAHV,OAKIT,EAAYS,GALhB,gDAOIL,GAAY,GACZE,EAAgB,KAAMI,SAR1B,yBAUIR,GAAa,GAVjB,6EAFc,sBACTN,GADS,mCAede,EACD,GAAE,CAACf,KAGF,2BACGO,IACC,0BACE,uBAAIE,MAGPJ,IACC,0BACE,wCAGU,OAAbF,IACC,0BACE,+CAGHA,GAAYA,EAASa,OAAS,IAC7B,wBACGb,EAASc,KAAI,SAAAC,GACZ,OACE,SAAC,EAAD,CAEExB,UAAWwB,EAAMxB,UACjBC,KAAMuB,EAAMvB,KACZC,aAAcsB,EAAMtB,cAHfsB,EAAMlB,GAMhB,QAKV,C","sources":["components/CastItem/CastItem.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import React from 'react';\n\nconst baseImageUrl = 'https://image.tmdb.org/t/p/w200';\n\nconst CastItem = ({ character, name, profile_path }) => {\n  const imageUrl = profile_path ? `${baseImageUrl}${profile_path}` : '';\n\n  return (\n    <li>\n      <img src={imageUrl} alt=\"\" />\n      <p>Actor's name: {name}</p>\n      <p>Character: {character}</p>\n    </li>\n  );\n};\n\nexport default CastItem;\n","import CastItem from '../CastItem/CastItem';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCast } from '../../services/getTrendingMovies';\n\nconst Cast = () => {\n  const { id } = useParams();\n\n  const [castData, setCastData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\n    'Something went wrong! Try again later'\n  );\n\n  useEffect(() => {\n    if (!id) return;\n    async function fetchCastData() {\n      try {\n        setIsLoading(true);\n        const cast = await getCast(id);\n\n        setCastData(cast);\n      } catch (error) {\n        setHasError(true);\n        setErrorMessage(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchCastData();\n  }, [id]);\n\n  return (\n    <div>\n      {hasError && (\n        <div>\n          <p>{errorMessage}</p>\n        </div>\n      )}\n      {isLoading && (\n        <div>\n          <p>Loading...</p>\n        </div>\n      )}\n      {castData === null && (\n        <div>\n          <p>No cast available</p>\n        </div>\n      )}\n      {castData && castData.length > 0 && (\n        <ul>\n          {castData.map(actor => {\n            return (\n              <CastItem\n                key={actor.id}\n                character={actor.character}\n                name={actor.name}\n                profile_path={actor.profile_path}\n              />\n            );\n          })}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default Cast;\n"],"names":["character","name","profile_path","imageUrl","src","alt","id","useParams","useState","castData","setCastData","isLoading","setIsLoading","hasError","setHasError","errorMessage","setErrorMessage","useEffect","getCast","cast","message","fetchCastData","length","map","actor"],"sourceRoot":""}